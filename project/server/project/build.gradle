plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
//	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'reading'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.google.code.gson:gson'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.2'

	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
}

tasks.named('test') {
	useJUnitPlatform()
}
// 테스트 코드를 제외한 빌드 수행
tasks.withType(Test) {
	enabled = false
}

def querydslSrcDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslSrcDir ]
}

clean {
	delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslSrcDir))
}